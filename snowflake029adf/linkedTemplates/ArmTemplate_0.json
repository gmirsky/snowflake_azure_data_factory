{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "snowflake029adf"
		},
		"ls_snowflake_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_snowflake'"
		},
		"ls_testdata_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://testdata029asa.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ls_snowflake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Linked service to Snowflake",
				"annotations": [],
				"type": "Snowflake",
				"typeProperties": {
					"authenticationType": "Basic",
					"connectionString": "[parameters('ls_snowflake_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_testdata')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Link service to test data",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_testdata_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_snowflake_raw_machines')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Data set for Snowflake raw.machines table",
				"linkedServiceName": {
					"referenceName": "ls_snowflake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeTable",
				"schema": [
					{
						"name": "MAKE",
						"type": "VARCHAR",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "MODEL",
						"type": "VARCHAR",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "CATEGORY",
						"type": "VARCHAR",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "YEAR",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "RAW",
					"table": "MACHINES"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_snowflake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_test_data_machines')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_testdata",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "machines.csv",
						"folderPath": "csv",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Make",
						"type": "String"
					},
					{
						"name": "Model",
						"type": "String"
					},
					{
						"name": "Category",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_testdata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_test_data_machines')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Data flow for test data file machines",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_test_data_machines",
								"type": "DatasetReference"
							},
							"name": "sourceTestData"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_snowflake",
								"type": "LinkedServiceReference"
							},
							"name": "sinkDataToSnowflake",
							"rejectedDataLinkedService": {
								"referenceName": "ls_testdata",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "aggregateDeduplicate"
						},
						{
							"name": "selectDeduplicatedData"
						},
						{
							"name": "sortDepuplicatedData"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Make as string,",
						"          Model as string,",
						"          Category as string,",
						"          Year as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceTestData",
						"sourceTestData aggregate(groupBy(Category,",
						"          Year,",
						"          Make,",
						"          Model),",
						"     count = count('1')) ~> aggregateDeduplicate",
						"aggregateDeduplicate select(mapColumn(",
						"          Category,",
						"          Year,",
						"          Make,",
						"          Model",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectDeduplicatedData",
						"selectDeduplicatedData sort(asc(Category, true),",
						"     asc(Year, true),",
						"     asc(Make, true),",
						"     asc(Model, true)) ~> sortDepuplicatedData",
						"sortDepuplicatedData sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     input(",
						"          MAKE as string,",
						"          MODEL as string,",
						"          CATEGORY as string,",
						"          YEAR as decimal(38,0)",
						"     ),",
						"     format: 'table',",
						"     tableName: 'MACHINES',",
						"     schemaName: 'RAW',",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     truncate: true,",
						"     store: 'snowflake',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true) ~> sinkDataToSnowflake"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_test_data_machines')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_snowflake')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_testdata')]"
			]
		}
	]
}